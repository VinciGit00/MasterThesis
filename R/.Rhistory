setwd("~/Github/MasterThesis/R")
setwd("~/Github/MasterThesis/R")
read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv");
install.packages("glmnet")
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv");
cv_res <- cv.glmnet(df$AQ_pm10, df$AQ_pm10)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv");
cv_res <- cv.glmnet(df$AQ_pm10, df$AQ_pm10)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv");
cv_res <- cv.glmnet(df$AQ_pm10, df$AQ_pm10, nfolds = 10,)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv");
cv_res <- cv.glmnet(c(df$WE_temp_2m), df$AQ_pm10, nfolds = 10)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
cv_res <- cv.glmnet(c(df$WE_temp_2m), df$AQ_pm10, nfolds = 10)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
cv_res <- cv.glmnet(c(df$WE_temp_2m), df$AQ_nh3, nfolds = 10)
View(df)
df <- data.frame(WE_temp_2m = rnorm(100), AQ_pm10 = rnorm(100))
# Check if the issue persists with this minimal example
cv_res <- cv.glmnet(x = as.matrix(df$WE_temp_2m), y = df$AQ_pm10, nfolds = 10)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
View(df)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
df <- data.frame(WE_temp_2m = rnorm(100), AQ_pm10 = rnorm(100))
# Adding a new variable AQ_no2
df$AQ_no2 <- rnorm(100)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
df <- data.frame(WE_temp_2m = rnorm(100), AQ_pm10 = rnorm(100))
# Adding a new variable AQ_no2
df$AQ_no2 <- rnorm(100)
# Check if the issue persists with this minimal example
cv_res <- cv.glmnet(x = as.matrix(df$WE_temp_2m,  df$AQ_no2), y = df$AQ_pm10, nfolds = 10)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
df <- data.frame(WE_temp_2m = rnorm(100), AQ_pm10 = rnorm(100))
# Adding a new variable AQ_no2
df$AQ_no2 <- rnorm(100)
# Check if the issue persists with this minimal example
cv_res <- cv.glmnet(x = as.matrix(c(df$WE_temp_2m,  df$AQ_no2))), y = df$AQ_pm10, nfolds = 10)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
df <- data.frame(WE_temp_2m = rnorm(100), AQ_pm10 = rnorm(100))
# Adding a new variable AQ_no2
df$AQ_no2 <- rnorm(100)
# Check if the issue persists with this minimal example
cv_res <- cv.glmnet(x = as.matrix(c(df$WE_temp_2m,  df$AQ_no2)), y = df$AQ_pm10, nfolds = 10)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
# Create a matrix with two columns (WE_temp_2m and AQ_no2)
x_matrix <- as.matrix(df[, c("WE_temp_2m", "AQ_no2")])
# Response variable
y <- df$AQ_pm10
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
View(cv_res)
library(glmnet)
library(ggplot2)
set.seed(123)  # Setting a seed for reproducibility
# Assume df, x_matrix, and y are already defined as in the previous code
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot the cross-validated mean squared error (cvm) against log(lambda)
plot(cv_res)
# Print the minimum mean squared error and corresponding lambda
lambda_min <- cv_res$lambda.min
min_cvm <- cv_res$cvm[cv_res$lambda == lambda_min]
cat("Minimum Mean Squared Error:", min_cvm, "at Lambda:", lambda_min, "\n")
# Alternatively, you can use ggplot2 for more customization
ggplot(cv_res) +
geom_point(aes(log(lambda), cvm), color = "blue", size = 2) +
geom_line(aes(log(lambda), cvm), color = "red", size = 1) +
labs(title = "Cross-Validated Mean Squared Error vs Log(Lambda)",
x = "Log(Lambda)",
y = "Cross-Validated Mean Squared Error") +
theme_minimal()
library(glmnet)
library(ggplot2)
set.seed(123)  # Setting a seed for reproducibility
# Assume df, x_matrix, and y are already defined as in the previous code
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function
par(mfrow = c(1, 2))  # Set up a 1x2 grid of plots
plot(cv_res)
# Plot with ggplot2
ggplot(cv_res) +
geom_point(aes(lambda, cvm), color = "blue", size = 2) +
geom_line(aes(lambda, cvm), color = "red", size = 1) +
labs(title = "Cross-Validated Mean Squared Error vs Lambda",
x = "Lambda",
y = "Cross-Validated Mean Squared Error") +
theme_minimal()
# Alternatively, you can use ggplot2 for more customization
ggplot(cv_res) +
geom_point(aes(lambda, cvm), color = "blue", size = 2) +
geom_line(aes(lambda, cvm), color = "red", size = 1) +
labs(title = "Cross-Validated Mean Squared Error vs Lambda",
x = "Lambda",
y = "Cross-Validated Mean Squared Error") +
theme_minimal()
library(glmnet)
library(ggplot2)
set.seed(123)  # Setting a seed for reproducibility
# Assume df, x_matrix, and y are already defined as in the previous code
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function (lambda)
plot(cv_res)
# Plot with ggplot2 (log(lambda))
ggplot(cv_res) +
geom_point(aes(log(lambda), cvm), color = "blue", size = 2) +
geom_line(aes(log(lambda), cvm), color = "red", size = 1) +
labs(title = "Cross-Validated Mean Squared Error vs Log(Lambda)",
x = "Log(Lambda)",
y = "Cross-Validated Mean Squared Error") +
theme_minimal()
plot(cv_res)
library(glmnet)
library(ggplot2)
set.seed(123)  # Setting a seed for reproducibility
# Assume df, x_matrix, and y are already defined as in the previous code
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function (lambda)
plot(cv_res)
library(glmnet)
library(ggplot2)
set.seed(123)  # Setting a seed for reproducibility
# Assume df, x_matrix, and y are already defined as in the previous code
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function (lambda)
plot(cv_res)
# Plot with ggplot2 (log(lambda))
ggplot(cv_res) +
geom_point(aes(log(lambda), cvm), color = "blue", size = 2) +
geom_line(aes(log(lambda), cvm), color = "red", size = 1) +
labs(title = "Cross-Validated Mean Squared Error vs Log(Lambda)",
x = "Log(Lambda)",
y = "Cross-Validated Mean Squared Error") +
theme_minimal()
library(glmnet)
library(ggplot2)
set.seed(123)  # Setting a seed for reproducibility
# Assume df, x_matrix, and y are already defined as in the previous code
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function (lambda)
plot(cv_res)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
# Create a matrix with two columns (WE_temp_2m and AQ_no2)
x_matrix <- as.matrix(df[, c("WE_temp_2m", "AQ_no2")])
# Response variable
y <- df$AQ_nh3
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function (lambda)
plot(cv_res)
View(df)
col(df)
clear
names(df)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
# Create a matrix with two columns (WE_temp_2m and AQ_no2)
x_matrix <- as.matrix(df[, c("WE_temp_2m", "WE_wind_speed_10m_mean", "WE_tot_precipitation", "WE_surface_pressure",
"WE_solar_radiation", "WE_rh_min", "WE_rh_mean", "WE_rh_max", "WE_wind_speed_100m_mean",
"WE_wind_speed_100m_max", "WE_blh_layer_max", "WE_blh_layer_min")])
# Response variable
y <- df$AQ_nh3
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function (lambda)
plot(cv_res)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
# Create a matrix with two columns (WE_temp_2m and AQ_no2)
x_matrix <- as.matrix(df[, c("WE_temp_2m", "WE_wind_speed_10m_mean", "WE_tot_precipitation", "WE_surface_pressure",
"WE_solar_radiation", "WE_rh_min", "WE_rh_mean", "WE_rh_max", "WE_wind_speed_100m_mean",
"WE_wind_speed_100m_max", "WE_blh_layer_max", "WE_blh_layer_min", "EM_nh3_livestock_mm",
"EM_nh3_agr_soils", "EM_nh3_agr_waste_burn", "EM_nh3_sum", "EM_nox_traffic", "EM_nox_sum", "EM_so2_sum"
)])
# Response variable
y <- df$AQ_nh3
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function (lambda)
plot(cv_res)
View(df)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
matrice_correlazione <- cor(df)
# Create a matrix with two columns (WE_temp_2m and AQ_no2)
x_matrix <- as.matrix(df[, c("WE_temp_2m", "WE_wind_speed_10m_mean", "WE_tot_precipitation", "WE_surface_pressure",
"WE_solar_radiation", "WE_rh_min", "WE_rh_mean", "WE_rh_max", "WE_wind_speed_100m_mean",
"WE_wind_speed_100m_max", "WE_blh_layer_max", "WE_blh_layer_min", "EM_nh3_livestock_mm",
"EM_nh3_agr_soils", "EM_nh3_agr_waste_burn", "EM_nh3_sum", "EM_nox_traffic", "EM_nox_sum", "EM_so2_sum"
)])
# Response variable
y <- df$AQ_nh3
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function (lambda)
plot(cv_res)
View(matrice_correlazione)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
matrix_correlation <- cor(df)
# Create a matrix with two columns (WE_temp_2m and AQ_no2)
x_matrix <- as.matrix(df[, c("WE_temp_2m", "WE_wind_speed_10m_mean", "WE_tot_precipitation", "WE_surface_pressure",
"WE_solar_radiation", "WE_rh_min", "WE_rh_mean", "WE_rh_max", "WE_wind_speed_100m_mean",
"WE_wind_speed_100m_max", "WE_blh_layer_max", "WE_blh_layer_min", "EM_nh3_livestock_mm",
"EM_nh3_agr_soils", "EM_nh3_agr_waste_burn", "EM_nh3_sum", "EM_nox_traffic", "EM_nox_sum", "EM_so2_sum"
)])
# Response variable
y <- df$AQ_nh3
# Cross-validation using cv.glmnet
cv_res <- cv.glmnet(x = x_matrix, y = y, nfolds = 10)
# Plot with glmnet plot function (lambda)
plot(cv_res)
View(matrix_correlation)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
View(df)
names(df)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
# Assuming your dataframe is df
# Add columns for seasons
df$Spring <- ifelse(df$Season == "Spring", 1, 0)
df$Summer <- ifelse(df$Season == "Summer", 1, 0)
df$Autumn <- ifelse(df$Season == "Autumn", 1, 0)
df$Winter <- ifelse(df$Season == "Winter", 1, 0)
# Add a binary column for lockdown
df$During_Lockdown <- ifelse(df$Lockdown == 1, 1, 0)
# Print the updated column names
names(df)
View(df)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
library(glmnet)
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
df <- na.omit(df)
# Add columns for seasons
df$Spring <- ifelse(df$Season == "Spring", 1, 0)
df$Summer <- ifelse(df$Season == "Summer", 1, 0)
df$Autumn <- ifelse(df$Season == "Autumn", 1, 0)
df$Winter <- ifelse(df$Season == "Winter", 1, 0)
# Add a binary column for lockdown
df$During_Lockdown <- ifelse(df$Lockdown == 1, 1, 0)
# Print the updated column names
names(df)
