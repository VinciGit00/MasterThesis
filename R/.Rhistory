library(glmnet)
# Set the working directory and read the data
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
# Remove rows with missing values
df <- na.omit(df)
# Select columns of interest
colonne_da_includere <- c("EM_nh3_agr_waste_burn", "EM_nox_traffic", "EM_nox_sum", "EM_so2_sum",
"WE_temp_2m", "WE_wind_speed_10m_mean", "WE_blh_layer_max",
"WE_blh_layer_min", "WE_tot_precipitation", "WE_precipitation_t")
subset <- df[, colonne_da_includere]
# Create a matrix with predictor variables
x_matrix <- as.matrix(subset)
# Response variable
y <- df$AQ_nh3
# Fit a polynomial regression model
degree <- 2  # You can change this to the desired degree of the polynomial
poly_model <- lm(y ~ poly(x_matrix, degree, raw = TRUE), data = df)
# Fit a ridge regression model
ridge_model <- cv.glmnet(x_matrix, y, alpha = 0)  # Use alpha = 0 for ridge regression
# Plot the cross-validated mean squared error (MSE) against lambda for ridge
plot(ridge_model)
# Select the best lambda value based on cross-validated MSE
best_lambda_ridge <- ridge_model$lambda.min
# Print the best lambda value for ridge
cat(sprintf("\nBest lambda value for ridge: %.4f\n", best_lambda_ridge))
# Get the coefficients of the selected ridge model
selected_coefs_ridge <- coef(ridge_model, s = best_lambda_ridge)
# Print the coefficients for ridge
print(selected_coefs_ridge)
# Get the indices of non-zero coefficients for ridge
non_zero_indices_ridge <- which(selected_coefs_ridge != 0)
# Extract the names of selected covariates for ridge
selected_covariates_ridge <- colnames(x_matrix)[non_zero_indices_ridge]
# Print the selected covariates and their coefficients for ridge
cat("\nSelected covariates and their coefficients for ridge:\n")
for (i in non_zero_indices_ridge) {
coef_value <- selected_coefs_ridge[i]
covariate_name <- colnames(x_matrix)[i]
cat(sprintf("%s: %.4f\n", covariate_name, coef_value))
}
cat("\nSelected covariates, their coefficients, and standard deviations for ridge:\n")
if (length(non_zero_indices_ridge) > 0) {
for (i in non_zero_indices_ridge) {
coef_value <- selected_coefs_ridge[i]
coef_sd <- ridge_model$se[i]
covariate_name <- colnames(x_matrix)[i]
cat(sprintf("%s: Coefficient=%.4f, Standard deviation=%.4f\n", covariate_name, coef_value, coef_sd))
}
} else {
cat("No non-zero coefficients selected for ridge.\n")
}
# Print the names of parameters included in ridge model
cat("\nNames of parameters included in ridge model:\n")
print(selected_covariates_ridge)
# Make predictions using the selected covariates for ridge
x_selected_ridge <- x_matrix[, non_zero_indices_ridge-1]
ridge_predictions <- predict(poly_model, newdata = as.data.frame(x_selected_ridge))
# Calculate residuals for ridge
ridge_residuals <- y - ridge_predictions
# Calculate Root Mean Squared Error (RMSE) for ridge model
ridge_rmse <- sqrt(mean(ridge_residuals^2))
# Print the RMSE for ridge model
cat(sprintf("\nRoot Mean Squared Error (RMSE) for ridge model: %.4f\n", ridge_rmse))
# Print all the parameters of the ridge model
cat("\nParameters of the ridge model:\n")
print(ridge_model)
# Calculate and print autocorrelation of residuals for ridge
autocorr_ridge <- acf(ridge_residuals, plot = FALSE)$acf
cat("\nAutocorrelation of residuals for ridge:\n")
print(autocorr_ridge)
library(glmnet)
# Set the working directory and read the data
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
# Remove rows with missing values
df <- na.omit(df)
# Select columns of interest
colonne_da_includere <- c("EM_nh3_agr_waste_burn", "EM_nox_traffic", "EM_nox_sum", "EM_so2_sum",
"WE_temp_2m", "WE_wind_speed_10m_mean", "WE_blh_layer_max",
"WE_blh_layer_min", "WE_tot_precipitation", "WE_precipitation_t")
subset <- df[, colonne_da_includere]
# Create a matrix with predictor variables
x_matrix <- as.matrix(subset)
# Response variable
y <- df$AQ_nh3
# Fit a ridge regression model
ridge_model <- cv.glmnet(x_matrix, y, alpha = 0)  # Use alpha = 0 for ridge regression
# Select the best lambda value based on cross-validated MSE
best_lambda_ridge <- ridge_model$lambda.min
# Get the coefficients of the selected ridge model
selected_coefs_ridge <- coef(ridge_model, s = best_lambda_ridge)
# Get the indices of non-zero coefficients for ridge
non_zero_indices_ridge <- which(selected_coefs_ridge != 0)
# Extract the names of selected covariates for ridge
selected_covariates_ridge <- colnames(x_matrix)[non_zero_indices_ridge]
# Create a data frame to store coefficients and standard deviations
coefficients_df <- data.frame(
Variable = selected_covariates_ridge,
Coefficient = selected_coefs_ridge[non_zero_indices_ridge],
Standard_Deviation = ridge_model$glmnet.fit$beta[, non_zero_indices_ridge]
)
library(glmnet)
# Set the working directory and read the data
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
# Remove rows with missing values
df <- na.omit(df)
# Select columns of interest
colonne_da_includere <- c("EM_nh3_agr_waste_burn", "EM_nox_traffic", "EM_nox_sum", "EM_so2_sum",
"WE_temp_2m", "WE_wind_speed_10m_mean", "WE_blh_layer_max",
"WE_blh_layer_min", "WE_tot_precipitation", "WE_precipitation_t")
subset <- df[, colonne_da_includere]
# Create a matrix with predictor variables
x_matrix <- as.matrix(subset)
# Response variable
y <- df$AQ_nh3
# Fit a ridge regression model
ridge_model <- cv.glmnet(x_matrix, y, alpha = 0)  # Use alpha = 0 for ridge regression
# Select the best lambda value based on cross-validated MSE
best_lambda_ridge <- ridge_model$lambda.min
# Get the coefficients of the selected ridge model
selected_coefs_ridge <- coef(ridge_model, s = best_lambda_ridge)
# Get the indices of non-zero coefficients for ridge
non_zero_indices_ridge <- which(selected_coefs_ridge != 0)
# Extract the names of selected covariates for ridge
selected_covariates_ridge <- colnames(x_matrix)[non_zero_indices_ridge]
# Get the standard deviations of coefficients
coefficients_sd <- summary(ridge_model)$beta.sd[non_zero_indices_ridge]
library(glmnet)
# Set the working directory and read the data
setwd("~/Github/MasterThesis/R")
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
# Remove rows with missing values
df <- na.omit(df)
# Select columns of interest
colonne_da_includere <- c("EM_nh3_agr_waste_burn", "EM_nox_traffic", "EM_nox_sum", "EM_so2_sum",
"WE_temp_2m", "WE_wind_speed_10m_mean", "WE_blh_layer_max",
"WE_blh_layer_min", "WE_tot_precipitation", "WE_precipitation_t")
subset <- df[, colonne_da_includere]
# Create a matrix with predictor variables
x_matrix <- as.matrix(subset)
# Response variable
y <- df$AQ_nh3
# Fit a ridge regression model
ridge_model <- cv.glmnet(x_matrix, y, alpha = 0)  # Use alpha = 0 for ridge regression
# Select the best lambda value based on cross-validated MSE
best_lambda_ridge <- ridge_model$lambda.min
# Get the coefficients of the selected ridge model
selected_coefs_ridge <- coef(ridge_model, s = best_lambda_ridge)
# Get the indices of non-zero coefficients for ridge
non_zero_indices_ridge <- which(selected_coefs_ridge != 0)
# Extract the names of selected covariates for ridge
selected_covariates_ridge <- colnames(x_matrix)[non_zero_indices_ridge]
# Calculate the standard deviations of coefficients manually
n <- nrow(x_matrix)
residual_std_error <- sqrt(sum((predict(ridge_model, newx = x_matrix) - y)^2) / (n - length(non_zero_indices_ridge)))
coefficients_sd <- residual_std_error / sqrt(n)
# Create a data frame to store coefficients and standard deviations
coefficients_df <- data.frame(
Variable = selected_covariates_ridge,
Coefficient = selected_coefs_ridge[non_zero_indices_ridge],
Standard_Deviation = rep(coefficients_sd, length(non_zero_indices_ridge))
)
# Print the table
print(coefficients_df)
# Imposta la directory di lavoro
setwd("~/Github/MasterThesis/R")
# Carica le librerie necessarie
library(em)
library(caret)
library(e1071)
library(moments)
library(glmnet)
# Leggi il file CSV
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
# Rimuovi le righe con valori mancanti
df <- na.omit(df)
# Aggiungi colonne per le stagioni
df$Spring <- ifelse(df$Season == 1, 1, 0)
df$Summer <- ifelse(df$Season == 2, 1, 0)
df$Autumn <- ifelse(df$Season == 3, 1, 0)
df$Winter <- ifelse(df$Season == 4, 1, 0)
# Aggiungi una colonna binaria per il lockdown basata sugli indici di riga
df$During_Lockdown <- ifelse(1:nrow(df) >= 1529 & 1:nrow(df) <= 1584, 1, 0)
# Estrai le colonne rilevanti per il modello
predictors <- df[, c("Spring", "Summer", "Autumn", "Winter", "During_Lockdown")]
# Variabili legate al meteo
WE_variables <- c("WE_temp_2m", "WE_wind_speed_10m_mean", "WE_wind_speed_10m_max", "WE_tot_precipitation", "WE_precipitation_t",
"WE_surface_pressure", "WE_solar_radiation", "WE_rh_min", "WE_rh_mean", "WE_rh_max", "WE_wind_speed_100m_mean",
"WE_wind_speed_100m_max", "WE_blh_layer_max", "WE_blh_layer_min")
# Combina predittori e variabili meteorologiche
all_predictors <- cbind(predictors, df[, WE_variables])
# Risposta (variabile dipendente)
response <- df$AQ_nh3
# Crea un data frame con tutti i predittori
model_data <- as.data.frame(cbind(all_predictors, response))
# Fit del modello di regressione lineare con interazioni
model <- lm(response ~ .^3, data = model_data)
# Visualizza il riassunto del modello
summary(model)
# Calcola i residui del modello
residuals <- residuals(model)
# Calcola la media dei residui
residuals_mean <- mean(residuals)
# Calcola la skewness dei residui
residuals_skewness <- skewness(residuals)
# Calcola la deviazione standard dei residui
residuals_sd <- sd(residuals)
# Calcola la kurtosis dei residui
residuals_kurtosis <- kurtosis(residuals)
# Stampa i risultati
cat("Media dei residui:", residuals_mean, "\n")
cat("Skewness dei residui:", residuals_skewness, "\n")
cat("Deviazione standard dei residui:", residuals_sd, "\n")
cat("Kurtosis dei residui:", residuals_kurtosis, "\n")
# Calcola l'autocorrelazione dei residui
residuals_autocorrelation <- acf(residuals, plot = FALSE)
# Estrai i valori di autocorrelazione
autocorrelation_values <- residuals_autocorrelation$acf
# Stampa i valori di autocorrelazione
cat("Autocorrelazione dei residui:\n")
print(autocorrelation_values)
# Calcola le previsioni del modello
predictions <- predict(model, newdata = model_data)
# Calcola il RMSE
rmse <- sqrt(mean((predictions - model_data$response)^2))
# Stampa il valore del RMSE
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
# Grafico scatterplot delle previsioni rispetto ai valori effettivi
plot(model_data$response, predictions, main = "Scatterplot previsions vs real values",
xlab = "Real values", ylab = "Previsions", col = "blue", pch = 16)
# Grafico della distribuzione degli errori
hist(model_data$response - predictions, main = "Error distribution",
xlab = "Errors", col = "lightblue", border = "black")
# Utilizza la funzione glmnet per la regressione LASSO
# Converti il dataframe in una matrice
x <- as.matrix(all_predictors)
# Adatta il modello LASSO
lasso_model <- cv.glmnet(x, model_data$response, alpha = 1)
# Trova il valore di lambda ottimale
lambda_min <- lasso_model$lambda.min
# Seleziona le variabili con il lambda ottimale
lasso_selected_variables <- coef(lasso_model, s = lambda_min)
lasso_selected_variables <- lasso_selected_variables[-1]  # Rimuovi l'intercetta
# Ottieni i nomi delle variabili selezionate
selected_variable_names <- names(lasso_selected_variables)[lasso_selected_variables != 0]
# Stampa le variabili selezionate
cat("Variabili selezionate con LASSO regression:\n")
print(selected_variable_names)
# Crea un nuovo dataframe solo con le variabili selezionate
lasso_model_data <- model_data[, c(selected_variable_names, "response")]
# Fit del modello lineare con le sole variabili selezionate
lasso_model_fit <- lm(response ~ ., data = as.data.frame(lasso_model_data))
# Visualizza il riassunto del modello LASSO
summary(lasso_model_fit)
# Stampa le variabili selezionate con LASSO
cat("Variabili selezionate con LASSO regression:\n")
print(selected_variable_names)
# Utilizza la funzione glmnet per la regressione ridge
ridge_model <- cv.glmnet(x, model_data$response, alpha = 0)
# Trova il valore di lambda ottimale per la ridge regression
lambda_min_ridge <- ridge_model$lambda.min
# Seleziona le variabili con il lambda ottimale
ridge_selected_variables <- coef(ridge_model, s = lambda_min_ridge)
ridge_selected_variables <- ridge_selected_variables[-1]  # Rimuovi l'intercetta
# Ottieni i nomi delle variabili selezionate
selected_variable_names_ridge <- names(ridge_selected_variables)[ridge_selected_variables != 0]
# Stampa le variabili selezionate con la ridge regression
cat("Variabili selezionate con ridge regression:\n")
print(selected_variable_names_ridge)
# Crea un nuovo dataframe solo con le variabili selezionate
ridge_model_data <- model_data[, c(selected_variable_names_ridge, "response")]
# Fit del modello lineare con le sole variabili selezionate dalla ridge regression
ridge_model_fit <- lm(response ~ ., data = as.data.frame(ridge_model_data))
# Visualizza il riassunto del modello ridge
summary(ridge_model_fit)
# Stampa le variabili selezionate con ridge regression
cat("Variabili selezionate con ridge regression:\n")
print(selected_variable_names_ridge)
# Imposta la directory di lavoro
setwd("~/Github/MasterThesis/R")
# Carica le librerie necessarie
library(em)
library(caret)
library(e1071)
library(moments)
library(glmnet)
# Leggi il file CSV
df <- read.csv("Agrimonia_scaled_Bertonico_for_interactions.csv")
# Rimuovi le righe con valori mancanti
df <- na.omit(df)
# Aggiungi colonne per le stagioni
df$Spring <- ifelse(df$Season == 1, 1, 0)
df$Summer <- ifelse(df$Season == 2, 1, 0)
df$Autumn <- ifelse(df$Season == 3, 1, 0)
df$Winter <- ifelse(df$Season == 4, 1, 0)
# Aggiungi una colonna binaria per il lockdown basata sugli indici di riga
df$During_Lockdown <- ifelse(1:nrow(df) >= 1529 & 1:nrow(df) <= 1584, 1, 0)
# Estrai le colonne rilevanti per il modello
predictors <- df[, c("Spring", "Summer", "Autumn", "Winter", "During_Lockdown")]
# Variabili legate al meteo
WE_variables <- c("WE_temp_2m", "WE_wind_speed_10m_mean", "WE_wind_speed_10m_max", "WE_tot_precipitation", "WE_precipitation_t",
"WE_surface_pressure", "WE_solar_radiation", "WE_rh_min", "WE_rh_mean", "WE_rh_max", "WE_wind_speed_100m_mean",
"WE_wind_speed_100m_max", "WE_blh_layer_max", "WE_blh_layer_min")
# Combina predittori e variabili meteorologiche
all_predictors <- cbind(predictors, df[, WE_variables])
# Risposta (variabile dipendente)
response <- df$AQ_nh3
# Crea un data frame con tutti i predittori
model_data <- as.data.frame(cbind(all_predictors, response))
# Fit del modello di regressione lineare con interazioni
model <- lm(response ~ .^3, data = model_data)
# Visualizza il riassunto del modello
summary(model)
# Calcola i residui del modello
residuals <- residuals(model)
# Calcola la media dei residui
residuals_mean <- mean(residuals)
# Calcola la skewness dei residui
residuals_skewness <- skewness(residuals)
# Calcola la deviazione standard dei residui
residuals_sd <- sd(residuals)
# Calcola la kurtosis dei residui
residuals_kurtosis <- kurtosis(residuals)
# Stampa i risultati
cat("Media dei residui:", residuals_mean, "\n")
cat("Skewness dei residui:", residuals_skewness, "\n")
cat("Deviazione standard dei residui:", residuals_sd, "\n")
cat("Kurtosis dei residui:", residuals_kurtosis, "\n")
# Calcola l'autocorrelazione dei residui
residuals_autocorrelation <- acf(residuals, plot = FALSE)
# Estrai i valori di autocorrelazione
autocorrelation_values <- residuals_autocorrelation$acf
# Stampa i valori di autocorrelazione
cat("Autocorrelazione dei residui:\n")
print(autocorrelation_values)
# Calcola le previsioni del modello
predictions <- predict(model, newdata = model_data)
# Calcola il RMSE
rmse <- sqrt(mean((predictions - model_data$response)^2))
# Stampa il valore del RMSE
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
# Grafico scatterplot delle previsioni rispetto ai valori effettivi
plot(model_data$response, predictions, main = "Scatterplot previsions vs real values",
xlab = "Real values", ylab = "Previsions", col = "blue", pch = 16)
# Grafico della distribuzione degli errori
hist(model_data$response - predictions, main = "Error distribution",
xlab = "Errors", col = "lightblue", border = "black")
# Utilizza la funzione glmnet per la regressione LASSO
# Converti il dataframe in una matrice
x <- as.matrix(all_predictors)
# Adatta il modello LASSO
lasso_model <- cv.glmnet(x, model_data$response, alpha = 1)
# Trova il valore di lambda ottimale
lambda_min <- lasso_model$lambda.min
# Seleziona le variabili con il lambda ottimale
lasso_selected_variables <- coef(lasso_model, s = lambda_min)
lasso_selected_variables <- lasso_selected_variables[-1]  # Rimuovi l'intercetta
# Ottieni i nomi delle variabili selezionate
selected_variable_names <- names(lasso_selected_variables)[lasso_selected_variables != 0]
# Calcola le deviazioni standard delle variabili selezionate con LASSO
lasso_selected_variables_sd <- predict(lasso_model, type = "nonzero", s = lambda_min)
# Stampa le variabili selezionate con LASSO e le relative deviazioni standard
cat("Variabili selezionate con LASSO regression e deviazioni standard:\n")
print(selected_variable_names)
print(lasso_selected_variables_sd)
# Crea un nuovo dataframe solo con le variabili selezionate
lasso_model_data <- model_data[, c(selected_variable_names, "response")]
# Fit del modello lineare con le sole variabili selezionate
lasso_model_fit <- lm(response ~ ., data = as.data.frame(lasso_model_data))
# Visualizza il riassunto del modello LASSO
summary(lasso_model_fit)
# Stampa le variabili selezionate con LASSO
cat("Variabili selezionate con LASSO regression:\n")
print(selected_variable_names)
# Utilizza la funzione glmnet per la regressione ridge
ridge_model <- cv.glmnet(x, model_data$response, alpha = 0)
# Trova il valore di lambda ottimale per la ridge regression
lambda_min_ridge <- ridge_model$lambda.min
# Seleziona le variabili con il lambda ottimale
ridge_selected_variables <- coef(ridge_model, s = lambda_min_ridge)
ridge_selected_variables <- ridge_selected_variables[-1]  # Rimuovi l'intercetta
# Ottieni i nomi delle variabili selezionate
selected_variable_names_ridge <- names(ridge_selected_variables)[ridge_selected_variables != 0]
# Calcola le deviazioni standard delle variabili selezionate con la ridge regression
ridge_selected_variables_sd <- predict(ridge_model, type = "nonzero", s = lambda_min_ridge)
# Stampa le variabili selezionate con la ridge regression e le relative deviazioni standard
cat("Variabili selezionate con ridge regression e deviazioni standard:\n")
print(selected_variable_names_ridge)
print(ridge_selected_variables_sd)
# Crea un nuovo dataframe solo con le variabili selezionate
ridge_model_data <- model_data[, c(selected_variable_names_ridge, "response")]
# Fit del modello lineare con le sole variabili selezionate dalla ridge regression
ridge_model_fit <- lm(response ~ ., data = as.data.frame(ridge_model_data))
# Visualizza il riassunto del modello ridge
summary(ridge_model_fit)
# Stampa le variabili selezionate con ridge regression
cat("Variabili selezionate con ridge regression:\n")
print(selected_variable_names_ridge)
ridge_model_fit
View(ridge_model)
ridge_model_fit
