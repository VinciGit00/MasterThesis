#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
join$buffer <- st_buffer(join, dist = 10000)
#Libraries
library(rgdal)
library(sf)
library(dplyr)
library(sp)
library(raster)
#Reading the files
##Shapefile
shapefile_path <- "/Users/marcovinciguerra/Desktop/bdn/second_grid.shp"
my_shapefile <- st_read(dsn = shapefile_path)
my_shapefile$field_1 <- NULL
##CSV
read_csv <- read.csv('/Users/marcovinciguerra/Desktop/bdn/Agrimonia_Dataset_v_2_0_1.csv')
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[1] = "Lon"
colnames(subset)[2] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(1:2, round, 2))
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
join$buffer <- st_buffer(join$geometry, dist = 10000)
View(join)
join$buffer <- st_buffer(join$geometry, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
View(read_csv)
View(read_csv)
unique(read_csv[, 1:3])
cord <- unique(read_csv[, 1:3])
library(sp)
coordinates(cord) <- c("Longitude", "Latitude")
View(cord)
plot(cord)
View(join)
join$buffer <- st_buffer(cord, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
library(raster)
st_as_sf(cord)
cord_sd ->st_as_sf(cord)
cord_sf <- st_as_sf(cord)
join$buffer <- st_buffer(cord_sf, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
st_buffer <- st_buffer(cord_sf, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
View(st_buffer)
plot(st_nuffer)
plot(st_buffer)
View(st_buffer)
View(join)
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine", "IdStations")]
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine", "IDStations")]
View(subset)
##Select the interested columns
subset <- read_csv[c("IDStations", "Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[3] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
colnames(subset)[2] = "Lon"
colnames(subset)[3] = "Lat"
View(join)
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
#Libraries
library(rgdal)
library(sf)
library(dplyr)
library(sp)
library(raster)
#Reading the files
##Shapefile
shapefile_path <- "/Users/marcovinciguerra/Desktop/bdn/second_grid.shp"
my_shapefile <- st_read(dsn = shapefile_path)
my_shapefile$field_1 <- NULL
##CSV
read_csv <- read.csv('/Users/marcovinciguerra/Desktop/bdn/Agrimonia_Dataset_v_2_0_1.csv')
cord <- unique(read_csv[, 1:3])
coordinates(cord) <- c("Longitude", "Latitude")
cord_sf <- st_as_sf(cord)
##Select the interested columns
subset <- read_csv[c("IDStations", "Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[2] = "Lon"
colnames(subset)[3] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(2:3, round, 2))
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
View(st_buffer)
View(st_buffer)
join <- merge(x= join, y=st_buffer, by=("IDStations"))
# Perform a spatial join between the join and st_buffer objects
join <- st_join(join, st_buffer, join = st_intersects)
View(join)
View(join)
View(st_buffer)
View(st_buffer)
join <- merge(x= join, y=st_buffer, by="IDStations")
View(cord_sf)
View(my_shapefile)
View(my_shapefile)
load("/Users/marcovinciguerra/Downloads/WE_EM_LA_LI.Rdata")
load("~/Downloads/WE_EM_LA_LI.Rdata")
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(st_buffer)
pot(st_buffer)
plot(st_buffer)
library(sf)
library(sf)
plot(st_buffer)
View(st_buffer)
View(st_buffer)
load("/Users/marcovinciguerra/Downloads/idw_era5land.RData")
View(df1)
View(df2)
View(df2_s)
View(df2_s)
View(dist)
View(dist)
setwd("~/R/bdn")
csv <- read.csv("Agrimonia_Dataset_v_2_0_1.csv")
View(csv)
subset <- csv[, c("IDStations")]
subset <- csv[, c("IDStations", "LI_pigs")]
subset <- csv[, c("IDStations", "LI_pigs", "LI_bovine")]
View(subset)
load("newDensity.Rdata")
View(result)
subset <- csv[, c("IDStations", "Time","LI_pigs", "LI_bovine")]
#Rename
names(result) <- c("IDStations", "New_Bovini", "New_Suini", "Date")
View(csv)
View(csv)
View(subset)
View(subset)
names(subset) <- c("IDStations", "Date", "Old_Suini", "Old_Bovini")
View(result)
View(result)
#Merge
merge <- merge(result, subset, by.x = c("IDStations", "Date"), by.y =  c("IDStations", "Date"))
View(merge)
#Calcolo del valore medio
avg_dens_bovini_old <- aggregate(merge$Old_Bovini, by = list(merge$IDStations), FUN = mean)
View(avg_dens_bovini_old)
avg_dens_bovini_old <- aggregate(merge$Old_Bovini, by = list(merge$IDStations), FUN = mean)
avg_dens_bovini_new <- aggregate(merge$New_Bovini, by = list(merge$IDStations), FUN = mean)
avg_dens_suini_old <- aggregate(merge$Old_Suini, by = list(merge$IDStations), FUN = mean)
avg_dens_suini_new <- aggregate(merge$New_Suini, by = list(merge$IDStations), FUN = mean)
View(avg_dens_bovini_new)
names(avg_dens_bovini_old) <- c("IDStations", "avg_bov_old")
View(avg_dens_bovini_new)
View(avg_dens_bovini_old)
View(avg_dens_bovini_old)
names(avg_dens_bovini_new) <- c("IDStations", "avg_bov_new")
names(avg_dens_bovini_old) <- c("IDStations", "avg_bov_old")
names(avg_dens_bovini_new) <- c("IDStations", "avg_bov_new")
names(avg_dens_suini_old) <- c("IDStations", "avg_suini_old")
names(avg_dens_suini_new) <- c("IDStations", "avg_suini_new")
View(avg_dens_bovini_new)
merge_mean <- merge(avg_dens_bovini_old, avg_dens_bovini_new, by= "IDStations")
View(merge_mean)
merge_mean <- merge(merge_mean, avg_dens_suini_old, by= "IDStations")
View(merge_mean)
View(avg_dens_suini_new)
merge_mean <- merge(avg_dens_bovini_old, avg_dens_bovini_new, by= "IDStations")
merge_mean <- merge(merge_mean, avg_dens_suini_old, by= "IDStations")
merge_mean <- merge(merge_mean, avg_dens_suini_new, by= "IDStations")
#Calcolo delle differenze
did$IDStations <- merge_mean$IDStations
#Calcolo delle differenze
diff$IDStations <- merge_mean$IDStations
#Calcolo delle differenze
diff <- data.frame()
diff$IDStations <- merge_mean$IDStations
#Calcolo delle differenze
diff <- data.frame(IDStations = merge_mean$IDStations)
View(diff)
View(merge_mean)
#Librerie
library(ggplot2)
#Plot dei bovini
# crea il grafico utilizzando ggplot2
ggplot(df, aes(x = avg_bov_old)) +
# aggiunge l'istogramma per la densità vecchia
geom_histogram(bins = 10, aes(fill = "Densità Vecchia"), alpha = 0.5) +
# aggiunge l'istogramma per la densità nuova
geom_histogram(bins = 10, aes(x = avg_bov_new, fill = "Densità Nuova"), alpha = 0.5) +
# suddivide gli istogrammi in base all'id della stazione
facet_wrap(~ IDStations) +
# personalizza il titolo e l'etichetta dell'asse x
labs(title = "Istogrammi delle Densità per IDStations", x = "Densità") +
# personalizza la legenda
scale_fill_manual(values = c("Densità Vecchia" = "blue", "Densità Nuova" = "green"), name = "Densità")
#Plot dei bovini
# crea il grafico utilizzando ggplot2
ggplot(df, aes(x = avg_bov_old)) +
# aggiunge l'istogramma per la densità vecchia
geom_histogram(bins = 10, aes(fill = "Densità Vecchia"), alpha = 0.5) +
# aggiunge l'istogramma per la densità nuova
geom_histogram(bins = 10, aes(x = avg_bov_new, fill = "Densità Nuova"), alpha = 0.5) +
# suddivide gli istogrammi in base all'id della stazione
facet_wrap(~ IDStations) +
# personalizza il titolo e l'etichetta dell'asse x
labs(title = "Istogrammi delle Densità per IDStations", x = "Densità") +
# personalizza la legenda
scale_fill_manual(values = c("Densità Vecchia" = "blue", "Densità Nuova" = "green"), name = "Densità")
ggplot(df, aes(x = avg_bov_old)) +
# aggiunge l'istogramma per la densità vecchia
geom_histogram(bins = 10, aes(fill = "Densità Vecchia"), alpha = 0.5) +
# aggiunge l'istogramma per la densità nuova
geom_histogram(bins = 10, aes(x = avg_bov_new, fill = "Densità Nuova"), alpha = 0.5) +
# suddivide gli istogrammi in base all'id della stazione
facet_wrap(~ IDStations) +
# personalizza il titolo e l'etichetta dell'asse x
labs(title = "Istogrammi delle Densità per IDStations", x = "Densità") +
# personalizza la legenda
scale_fill_manual(values = c("Densità Vecchia" = "blue", "Densità Nuova" = "green"), name = "Densità")
#Plot dei bovini
# crea il grafico utilizzando ggplot2
ggplot(merge_mean, aes(x = avg_bov_old)) +
# aggiunge l'istogramma per la densità vecchia
geom_histogram(bins = 10, aes(fill = "Densità Vecchia"), alpha = 0.5) +
# aggiunge l'istogramma per la densità nuova
geom_histogram(bins = 10, aes(x = avg_bov_new, fill = "Densità Nuova"), alpha = 0.5) +
# suddivide gli istogrammi in base all'id della stazione
facet_wrap(~ IDStations) +
# personalizza il titolo e l'etichetta dell'asse x
labs(title = "Istogrammi delle Densità per IDStations", x = "Densità") +
# personalizza la legenda
scale_fill_manual(values = c("Densità Vecchia" = "blue", "Densità Nuova" = "green"), name = "Densità")
#Calcolo delle differenze
diff <- data.frame(IDStations = merge_mean$IDStations, dif_bov = sqrt((merge_mean$avg_bov_old- merge_mean$avg_bov_new)^2) )
View(diff)
#Calcolo delle differenze
diff <- data.frame(IDStations = merge_mean$IDStations, dif_bov = sqrt((merge_mean$avg_bov_old- merge_mean$avg_bov_new)^2), dif_sui = sqrt((merge_mean$avg_suini_old- merge_mean$avg_suini_new)^2))
#Calcolo delle differenze
diff <- data.frame(IDStations = merge_mean$IDStations,
dif_bov = sqrt((merge_mean$avg_bov_old- merge_mean$avg_bov_new)^2),
dif_sui = sqrt((merge_mean$avg_suini_old- merge_mean$avg_suini_new)^2))
#Plot dei bovini
# crea il grafico utilizzando ggplot2
ggplot(merge_mean, aes(x = avg_bov_old)) +
# aggiunge l'istogramma per la densità vecchia
geom_histogram(bins = 10, aes(fill = "Densità Vecchia"), alpha = 0.5) +
# aggiunge l'istogramma per la densità nuova
geom_histogram(bins = 10, aes(x = avg_bov_new, fill = "Densità Nuova"), alpha = 0.5) +
# suddivide gli istogrammi in base all'id della stazione
facet_wrap(~ IDStations) +
# personalizza il titolo e l'etichetta dell'asse x
labs(title = "Istogrammi delle Densità per IDStations", x = "Densità") +
# personalizza la legenda
scale_fill_manual(values = c("Densità Vecchia" = "blue", "Densità Nuova" = "green"), name = "Densità")
# Definire la funzione di generazione del barplot
generate_barplot <- function(var_name) {
barplot(data[[var_name]], names.arg = data$IDStations, main = var_name, xlab = "IDStations", ylab = "avg_bov_old")
}
# Iterare su ogni colonna del dataset e applicare la funzione di generazione del grafico
for (col_name in names(data)) {
if (col_name != "IDStations") {
generate_barplot(col_name)
}
cc
# Selezionare la variabile di interesse
data <- diff[, c("IDStations", "avg_bov_old")]
# Selezionare la variabile di interesse
data <- diff[, c("IDStations", "dif_bov")]
# Definire la funzione di generazione del barplot
generate_barplot <- function(var_name) {
barplot(data[[var_name]], names.arg = data$IDStations, main = var_name, xlab = "IDStations", ylab = "avg_bov_old")
}
# Iterare su ogni colonna del dataset e applicare la funzione di generazione del grafico
for (col_name in names(data)) {
if (col_name != "IDStations") {
generate_barplot(col_name)
}
}
View(diff)
View(diff)
data <- diff[, c("IDStations", "dif_bov")]
# Definire la funzione di generazione del barplot
generate_barplot <- function(var_name) {
barplot(data[[var_name]], names.arg = data$IDStations, main = var_name, xlab = "IDStations", ylab = "abs dif")
}
# Iterare su ogni colonna del dataset e applicare la funzione di generazione del grafico
for (col_name in names(data)) {
if (col_name != "IDStations") {
generate_barplot(col_name)
}
}
# Suini
data <- diff[, c("IDStations", "dif_sui")]
# Definire la funzione di generazione del barplot
generate_barplot <- function(var_name) {
barplot(data[[var_name]], names.arg = data$IDStations, main = var_name, xlab = "IDStations", ylab = "abs dif")
}
# Iterare su ogni colonna del dataset e applicare la funzione di generazione del grafico
for (col_name in names(data)) {
if (col_name != "IDStations") {
generate_barplot(col_name)
}
}
#Plot dei bovini
# Selezionare solo le colonne "IDStations", "avg_bov_old" e "avg_bov_new"
data <- merge_mean[, c("IDStations", "avg_bov_old", "avg_bov_new")]
# Calcolare la media delle densità vecchie e nuove per ogni stazione
mean_data <- aggregate(data[, 2:3], list(data$IDStations), mean)
# Creare il barplot delle densità vecchie e nuove per ogni stazione
barplot(t(mean_data[, 2:3]), beside = TRUE, col = c("red", "blue"),
main = "Medie di avg_bov_old e avg_bov_new per stazione", xlab = "ID Stazione", ylab = "Media",
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(x = "topright"))
for (id in unique_ids) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == id, ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", id),
xlab = "", ylab = "Media", ylim = c(0, max(mean_data) * 1.2),
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(x = "topright"))
}
unique_ids <- unique(data$IDStations)
# Generare un grafico diverso per ogni IDStations
for (id in unique_ids) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == id, ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", id),
xlab = "", ylab = "Media", ylim = c(0, max(mean_data) * 1.2),
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(x = "topright"))
}
data <- merge_mean[, c("IDStations", "avg_bov_old", "avg_bov_new")]
# Ottenere la lista degli ID unici
unique_ids <- unique(data$IDStations)
# Generare un grafico diverso per i primi 5 IDStations
for (id in unique_ids[1:5]) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == id, ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", id),
xlab = "", ylab = "Media", ylim = c(0, max(mean_data) * 1.2),
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(x = "topright"))
}
data <- merge_mean[, c("IDStations", "avg_bov_old", "avg_bov_new")]
# Ottenere la lista degli ID unici
unique_ids <- unique(data$IDStations)
# Generare un grafico diverso per ogni IDStations e salvare in un file PDF
for (id in unique_ids) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == id, ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
pdf(paste("grafico_", id, ".pdf", sep = ""), width = 8.5, height = 5)
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", id),
xlab = "", ylab = "Media", ylim = c(0, max(mean_data) * 1.2),
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(x = "topright"))
dev.off()
}
data <- merge_mean[, c("IDStations", "avg_bov_old", "avg_bov_new")]
# Ottenere la lista degli ID unici
unique_ids <- unique(data$IDStations)
# Generare un grafico diverso per ogni IDStations
for (id in unique_ids[1:5]) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == id, ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"), horiz = TRUE,
main = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", id),
ylab = "", xlab = "Media", xlim = c(0, max(mean_data) * 1.2),
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(y = "top"))
}
data <- merge_mean[, c("IDStations", "avg_bov_old", "avg_bov_new")]
# Ottenere la lista degli ID unici
unique_ids <- unique(data$IDStations)
# Generare un grafico diverso per i primi 5 IDStations
for (id in unique_ids[1:5]) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == id, ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", id),
xlab = "", ylab = "Media", ylim = c(0, max(mean_data) * 1.2),
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(x = "topright"))
}
data <- merge_mean[, c("IDStations", "avg_bov_old", "avg_bov_new")]
# Ottenere la lista degli ID unici
unique_ids <- unique(data$IDStations)
# Generare un grafico diverso per i primi 5 IDStations
for (id in unique_ids[1:5]) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == id, ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", id),
xlab = "", ylab = "Media", ylim = c(0, max(mean_data) * 1.2),
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(x = "topright"))
}
# Selezionare solo le colonne "IDStations", "avg_bov_old" e "avg_bov_new"
data <- merge_mean[, c("IDStations", "avg_bov_old", "avg_bov_new")]
# Ottenere la lista degli ID unici
unique_ids <- unique(data$IDStations)
# Generare un grafico diverso per i primi 5 IDStations
for (id in unique_ids[1:5]) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == id, ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", id),
ylab = "", xlab = "Media", xlim = c(0, max(mean_data) * 1.2),
horiz = TRUE, legend.text = c("avg_bov_old", "avg_bov_new"),
args.legend = list(y = "top", x = "right"))
}
data <- merge_mean[, c("IDStations", "avg_bov_old", "avg_bov_new")]
# Ottenere la lista degli ID unici
unique_ids <- unique(data$IDStations)
# Aprire un file PDF per salvare tutti i plot
pdf("merge_mean_plots.pdf", width = 10, height = 8)
# Generare un grafico diverso per le prime 5 IDStations
for (id in unique_ids[1:5]) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == id, ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", id),
ylab = "", xlab = "Media", xlim = c(0, max(mean_data) * 1.2),
horiz = TRUE, legend.text = c("avg_bov_old", "avg_bov_new"),
args.legend = list(y = "top", x = "right"))
}
# Chiudere il file PDF
dev.off()
setwd("~/R/bdn/Plot Differenze")
# Selezionare solo le colonne "IDStations", "avg_bov_old" e "avg_bov_new"
setwd("~/R/bdn/Plot Differenze")
# Aprire il file PDF
pdf("grafici.pdf")
# Impostare le dimensioni della pagina e i margini
par(mfrow = c(5, 1), mar = c(5, 5, 2, 2), oma = c(2, 2, 2, 2))
# Generare un grafico diverso per le prime 5 IDStations
for (i in 1:5) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == unique_ids[i], ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = "", xlab = "", ylab = "Media", xlim = c(0, max(mean_data) * 1.2),
horiz = TRUE,
# Aggiungere il titolo del grafico sopra il grafico
sub = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", unique_ids[i]),
# Aggiungere i nomi delle legende
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(y = "top", x = "right"))
# Aggiungere il titolo del grafico sopra il grafico
mtext(paste("Medie di avg_bov_old e avg_bov_new per IDStations:", unique_ids[i]), side = 3, line = -1, outer = TRUE)
}
# Chiudere il file PDF
dev.off()
#Plot dei bovini
# Selezionare solo le colonne "IDStations", "avg_bov_old" e "avg_bov_new"
setwd("~/R/bdn/Plot Differenze")
# Aprire il file PDF
pdf("grafici_bovini.pdf")
# Impostare le dimensioni della pagina e i margini
par(mfrow = c(5, 1), mar = c(5, 5, 2, 2), oma = c(2, 2, 2, 2))
# Generare un grafico diverso per le prime 5 IDStations
for (i in 1:5) {
# Selezionare solo i dati per l'ID corrente
id_data <- data[data$IDStations == unique_ids[i], ]
# Calcolare la media delle densità vecchie e nuove per l'ID corrente
mean_data <- colMeans(id_data[, 2:3])
# Creare il barplot delle densità vecchie e nuove per l'ID corrente
barplot(mean_data, beside = TRUE, col = c("red", "blue"),
main = "", xlab = "", ylab = "Media", xlim = c(0, max(mean_data) * 1.2),
horiz = TRUE,
# Aggiungere il titolo del grafico sopra il grafico
sub = paste("Medie di avg_bov_old e avg_bov_new per IDStations:", unique_ids[i]),
# Aggiungere i nomi delle legende
legend.text = c("avg_bov_old", "avg_bov_new"), args.legend = list(y = "top", x = "right"))
# Aggiungere il titolo del grafico sopra il grafico
mtext(paste("Medie di avg_bov_old e avg_bov_new per IDStations:", unique_ids[i]), side = 3, line = -1, outer = TRUE)
}
# Chiudere il file PDF
dev.off()
