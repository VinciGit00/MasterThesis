library(dplyr)
library(sp)
library(sf)
setwd("~/R/bdn/Validation")
csv <- read.csv('AGC_Dataset.csv')
interest <- csv[, c("Latitude", "Longitude", "Time", "LI_pigs", "LI_bovine")]
interest <- na.omit(interest)
interest$LI_pigs   <- as.numeric(interest$LI_pigs)
interest$LI_bovine <- as.numeric(interest$LI_bovine)
#Select the one with the highest mean
df_means <- interest %>%
group_by(Latitude, Longitude) %>%
summarize(
mean_LI_pigs = mean(LI_pigs),
mean_LI_bovine = mean(LI_bovine)
)
max_row <- df_means[which.max(df_means$mean_LI_pigs + df_means$mean_LI_bovine), c("Longitude", "Latitude", "mean_LI_pigs", "mean_LI_bovine")]
max <- interest[c(interest$Latitude == max_row$Latitude & interest$Longitude == max_row$Longitude),]
#For Li_bovine
max_day <- max$Time[which.max(max$Li_bovine)]
# get unique values of Latitude and Longitude
unique_data <- distinct(interest, Latitude, Longitude)
# create a buffer around the unique data
st_buffer <- st_as_sf(unique_data, coords = c("Longitude", "Latitude"), crs = 4326)
st_buffer <- st_buffer(st_buffer, nQuadSegs = 4, endCapStyle = 'SQUARE', dist = 0.05)
# extract the geometry and coordinate information
coords <- st_coordinates(st_buffer)
geometry <- st_buffer$geometry
unique_data$buffer <- st_buffer$geometry
unique_data <- st_as_sf(unique_data, coords = c("Longitude", "Latitude"), crs = 4326)
unique_data$buffer <- st_as_sf(unique_data$buffer)
for (i in 1:nrow(st_buffer)) {
# Get the values in the current row
row_values <- st_buffer[i, ]
area_buffer <- st_area(row_values)/1000000
#Calculate the intersection
intersection <- st_intersection(row_values, unique_data$buffer)
area <- st_area(intersection)/1000000
weigth <- area/area_buffer
df <- data.frame(cbind(intersection[,c(1,7)]))
df$weigth <- round(weigth, 5 )
df <- df[, -3]
if(i==1) {
all_df <- df
} else {
all_df<-rbind(all_df,df)
}
}
unique_data$buffer <- st_buffer$geometry
View(unique_data)
unique_data <- distinct(interest, Latitude, Longitude)
# create a buffer around the unique data
st_buffer <- st_as_sf(unique_data, coords = c("Longitude", "Latitude"), crs = 4326)
st_buffer <- st_buffer(st_buffer, nQuadSegs = 4, endCapStyle = 'SQUARE', dist = 0.05)
# extract the geometry and coordinate information
coords <- st_coordinates(st_buffer)
geometry <- st_buffer$geometry
unique_data$buffer <- st_buffer$geometry
View(unique_data)
sf <- st_as_sf(unique_data, coords = c("Longitude", "Latitude"), crs = 4326)
View(sf)
sf
unique_data <- st_as_sf(unique_data, coords = c("Longitude", "Latitude"), crs = 4326)
for (i in 1:nrow(st_buffer)) {
# Get the values in the current row
row_values <- st_buffer[i, ]
area_buffer <- st_area(row_values)/1000000
#Calculate the intersection
intersection <- st_intersection(row_values, unique_data$buffer)
area <- st_area(intersection)/1000000
weigth <- area/area_buffer
df <- data.frame(cbind(intersection[,c(1,7)]))
df$weigth <- round(weigth, 5 )
df <- df[, -3]
if(i==1) {
all_df <- df
} else {
all_df<-rbind(all_df,df)
}
}
i = 1
# Get the values in the current row
row_values <- st_buffer[i, ]
View(row_values)
area_buffer <- st_area(row_values)/1000000
st_buffer <- st_buffer(point, dist = c(0.04, 0.22), nQuadSegs = 4, endCapStyle = 'SQUARE')
st_buffer <- st_buffer(st_buffer, dist = c(0.04, 0.22), nQuadSegs = 4, endCapStyle = 'SQUARE')
# Find the date with the highest LI_bovine value for the selected location
max_day <- max$Time[which.max(max$LI_bovine)]
# Get unique values of Latitude and Longitude
unique_data <- distinct(interest, Latitude, Longitude)
# Create a buffer around the unique data
unique_data_sf <- st_as_sf(unique_data, coords = c("Longitude", "Latitude"), crs = 4326)
st_buffer <- st_union(unique_data_sf)
st_buffer <- st_buffer(st_buffer, dist = c(0.04, 0.22), nQuadSegs = 4, endCapStyle = 'SQUARE')
