my_shapefile <- readOGR(dsn = shapefile_path, layer = basename(shapefile_path))
library(sf)
my_shapefile <- st_read(dsn = shapefile_path)
View(my_shapefile)
for (i in 1:nrow(my_shapefile)) {
lon <- my_shapefile$Lon[i]
lat <- my_shapefile$Lat[i]
# Do something with lon and lat
# For example, print them to the console:
print(paste("Longitude:", lon, "Latitude:", lat))
}
##CSV
read_csv = read.csv('/Users/marcovinciguerra/Desktop/bdn/Agrimonia_Dataset_v_2_0_1.csv')
View(read_csv)
##Select the interested columns
subset <- read_csv[c("Latitude","Longitude")]
View(subset)
##Select the interested columns
subset <- read_csv[c("Latitude","Longitude", "Time", "LI_pigs")]
View(read_csv)
View(subset)
View(subset)
##Select the interested columns
subset <- read_csv[c("Latitude","Longitude", "Time", "LI_pigs", "LI_bovine")]
join <- merge(x = my_shapefile, y = subset, by = c("Latitude", "Longitude"))
View(my_shapefile)
View(subset)
colnames(subset)[1] = "Lan"
subset <- read_csv[c("Latitude","Longitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[1] = "Lat"
colnames(subset)[2] = "Lon"
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
View(join)
my_shapefile$field_1 <- NULL
#Libraries
library(rgdal)
library(sf)
#Reading the files
##Shapefile
shapefile_path <- "/Users/marcovinciguerra/Desktop/bdn/second_grid.shp"
my_shapefile <- st_read(dsn = shapefile_path)
my_shapefile$field_1 <- NULL
##CSV
read_csv <- read.csv('/Users/marcovinciguerra/Desktop/bdn/Agrimonia_Dataset_v_2_0_1.csv')
##Select the interested columns
subset <- read_csv[c("Latitude","Longitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[1] = "Lat"
colnames(subset)[2] = "Lon"
#Join the dat
subset <- subset %>%
mutate(across(1:2, round, 2))
library(dplyr)
subset <- subset %>%
mutate(across(1:2, round, 2))
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
View(join)
##Select the interested columns
subset <- read_csv[c(,"Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[1] = "Lon"
subset <- subset %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(1:2, round, 2))
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
colnames(subset)[2] = "Lat"
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
View(join)
# Loop over each unique location
for (i in seq_len(nrow(unique_locs))) {
loc <- unique_locs[i, ]
lon <- loc[1]
lat <- loc[2]
# Get the data for this location
loc_data <- join[join$Lon == lon & join$Lat == lat, ]
# Get the unique days for this location
unique_days <- unique(loc_data$Time)
# Loop over each unique day for this location
for (j in seq_len(length(unique_days))) {
day <- unique_days[j]
# Get the data for this day at this location
day_data <- loc_data[loc_data$Time == day, ]
# Process the data for this day at this location
li_pigs <- sum(day_data$LI_pigs)
li_bovine <- sum(day_data$LI_bovine)
# Do something with the results (e.g., print them)
cat(sprintf("Location: (%f, %f), Day: %s, LI_pigs: %f, LI_bovine: %f\n", lon, lat, day, li_pigs, li_bovine))
}
View(join)
#Libraries
library(rgdal)
library(sf)
library(dplyr)
library(sp)
library(raster)
#Reading the files
##Shapefile
shapefile_path <- "/Users/marcovinciguerra/Desktop/bdn/second_grid.shp"
my_shapefile <- st_read(dsn = shapefile_path)
my_shapefile$field_1 <- NULL
##CSV
read_csv <- read.csv('/Users/marcovinciguerra/Desktop/bdn/Agrimonia_Dataset_v_2_0_1.csv')
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[1] = "Lon"
colnames(subset)[2] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(1:2, round, 2))
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
join$buffer <- st_buffer(join, dist = 10000)
#Libraries
library(rgdal)
library(sf)
library(dplyr)
library(sp)
library(raster)
#Reading the files
##Shapefile
shapefile_path <- "/Users/marcovinciguerra/Desktop/bdn/second_grid.shp"
my_shapefile <- st_read(dsn = shapefile_path)
my_shapefile$field_1 <- NULL
##CSV
read_csv <- read.csv('/Users/marcovinciguerra/Desktop/bdn/Agrimonia_Dataset_v_2_0_1.csv')
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[1] = "Lon"
colnames(subset)[2] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(1:2, round, 2))
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
join$buffer <- st_buffer(join$geometry, dist = 10000)
View(join)
join$buffer <- st_buffer(join$geometry, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
View(read_csv)
View(read_csv)
unique(read_csv[, 1:3])
cord <- unique(read_csv[, 1:3])
library(sp)
coordinates(cord) <- c("Longitude", "Latitude")
View(cord)
plot(cord)
View(join)
join$buffer <- st_buffer(cord, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
library(raster)
st_as_sf(cord)
cord_sd ->st_as_sf(cord)
cord_sf <- st_as_sf(cord)
join$buffer <- st_buffer(cord_sf, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
st_buffer <- st_buffer(cord_sf, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
View(st_buffer)
plot(st_nuffer)
plot(st_buffer)
View(st_buffer)
View(join)
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine", "IdStations")]
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine", "IDStations")]
View(subset)
##Select the interested columns
subset <- read_csv[c("IDStations", "Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[3] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
colnames(subset)[2] = "Lon"
colnames(subset)[3] = "Lat"
View(join)
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
#Libraries
library(rgdal)
library(sf)
library(dplyr)
library(sp)
library(raster)
#Reading the files
##Shapefile
shapefile_path <- "/Users/marcovinciguerra/Desktop/bdn/second_grid.shp"
my_shapefile <- st_read(dsn = shapefile_path)
my_shapefile$field_1 <- NULL
##CSV
read_csv <- read.csv('/Users/marcovinciguerra/Desktop/bdn/Agrimonia_Dataset_v_2_0_1.csv')
cord <- unique(read_csv[, 1:3])
coordinates(cord) <- c("Longitude", "Latitude")
cord_sf <- st_as_sf(cord)
##Select the interested columns
subset <- read_csv[c("IDStations", "Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[2] = "Lon"
colnames(subset)[3] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(2:3, round, 2))
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
View(st_buffer)
View(st_buffer)
join <- merge(x= join, y=st_buffer, by=("IDStations"))
# Perform a spatial join between the join and st_buffer objects
join <- st_join(join, st_buffer, join = st_intersects)
View(join)
View(join)
View(st_buffer)
View(st_buffer)
join <- merge(x= join, y=st_buffer, by="IDStations")
View(cord_sf)
View(my_shapefile)
View(my_shapefile)
load("/Users/marcovinciguerra/Downloads/WE_EM_LA_LI.Rdata")
load("~/Downloads/WE_EM_LA_LI.Rdata")
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(st_buffer)
pot(st_buffer)
plot(st_buffer)
library(sf)
library(sf)
plot(st_buffer)
View(st_buffer)
View(st_buffer)
load("/Users/marcovinciguerra/Downloads/idw_era5land.RData")
View(df1)
View(df2)
View(df2_s)
View(df2_s)
View(dist)
View(dist)
setwd("~/R/bdn/SerieStorica")
IDStations = "1266"
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
geom_sf(data = st_buffer, col = "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
library(ggplot2)
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
geom_sf(data = st_buffer, col = "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
mergeA <- st_transform(mergeA, st_crs(coordinates))
library(ggplot2)
library(sf)
library(co)
mergeA <- st_transform(mergeA, st_crs(coordinates))
#Libraries
library(rgdal)
library(sf)
library(dplyr)
library(sp)
library(raster)
library(leaflet)
library(sf)
setwd("~/R/bdn/SerieStorica")
source("funzioneSerieStoric.R")
source("funzioneSerieStorica.R")
#Libraries
library(rgdal)
library(sf)
library(dplyr)
library(sp)
library(raster)
library(leaflet)
library(sf)
setwd("~/R/bdn/SerieStorica")
source("funzioneSerieStorica.R")
#Loading the
setwd("~/R/bdn")
shapename <- read_sf('Com01012021_g_WGS84.shp')
#Loading the datasets
setwd("~/R/bdn")
my_shapefile <- st_read(dsn = "Com01012021_g_WGS84.shp")
setwd("~/R/bdn/Plot Differenze")
load("top20.rdata")
setwd("~/R/bdn")
csv <- read.csv("Agrimonia_Dataset_v_2_0_1.csv")
coordinates <- unique(csv[,1:3])
sp_coord <- coordinates
coordinates <- st_as_sf(coordinates, coords =  c("Longitude", "Latitude"), crs = 4326)
save(coordinates, file = "coordinates.Rdata")
setwd("~/R/bdn")
load("newDensity.rdata")
positions <- csv[, c("IDStations", "Latitude", "Longitude")]
merge <-merge(positions, top_20_stazioni, on = "IDStations")
plot(my_shapefile$geometry)
#Old time series
select_util_old <- merge(csv, top_20_stazioni, on = "IDStation")
select_util_old <- select_util_old[, c("IDStations", "Time","LI_pigs", "LI_bovine")]
#New time series
merge_new <- merge(top_20_stazioni, result, on= "IDStations")
merge_new <- merge_new[, c("IDStations", "Date", "wdSuini", "wdBovini")]
merge_new <- rename(merge_new, Time = Date, LI_pigs = wdSuini, LI_bovine = wdBovini)
#Merge
load("dataMerge.rdata")
dataMerge <- dataMerge[dataMerge$Date == "2020-12-31",]
mergeA <- merge(my_shapefile, dataMerge, by= "PRO_COM" )
#Plot dei suini
setwd("~/R/bdn/SerieStorica")
pdf("best_stations_Swine.pdf")
# Create a vector of unique station IDs
stations <- unique(merge_new$IDStations)
# Loop through each station
for (i in seq_along(stations)) {
# Subset the data for the current station and order by date
station_data <- merge_new[merge_new$IDStations == stations[i], ]
station_data <- station_data[order(station_data$Time), ]
#Old
station_data2 <- select_util_old[select_util_old$IDStations == stations[i], ]
station_data2 <- station_data2[order(station_data2$Time), ]
# Convert the Time variable to POSIXct format
station_data$Time <- as.POSIXct(station_data$Time)
station_data2$Time <- as.POSIXct(station_data2$Time)
# Check for missing or infinite values in the Time variable
if (any(is.na(station_data$Time)) || any(!is.finite(station_data$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
if (any(is.na(station_data2$Time)) || any(!is.finite(station_data2$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
# Create a time series plot
plot(station_data$Time, station_data$LI_pigs, type = "l",
xlab = "Time", ylab = "Density of pigs")
# Add a title with the station ID
title(main = paste("New station ID:", stations[i]))
plot(station_data2$Time, station_data2$LI_pigs, type = "l",
xlab = "Time", ylab = "Density of pigs")
# Add a title with the station ID
title(main = paste("Old station ID:", stations[i]))
# Add a page break between plots
if (i < length(stations)) {
cat("\f")  # Insert a form feed character
}
}
# Close the PDF file
dev.off()
#Plot dei bovini
setwd("~/R/bdn/SerieStorica")
pdf("best_stations_Bovine.pdf")
# Create a vector of unique station IDs
stations <- unique(merge_new$IDStations)
# Loop through each station
for (i in seq_along(stations)) {
# Subset the data for the current station and order by date
station_data <- merge_new[merge_new$IDStations == stations[i], ]
station_data <- station_data[order(station_data$Time), ]
#Old
station_data2 <- select_util_old[select_util_old$IDStations == stations[i], ]
station_data2 <- station_data2[order(station_data2$Time), ]
# Convert the Time variable to POSIXct format
station_data$Time  <- as.POSIXct(station_data$Time)
station_data2$Time <- as.POSIXct(station_data2$Time)
# Check for missing or infinite values in the Time variable
if (any(is.na(station_data$Time)) || any(!is.finite(station_data$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
if (any(is.na(station_data2$Time)) || any(!is.finite(station_data2$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
# Create a time series plot
plot(station_data$Time, station_data$LI_bovine, type = "l",
xlab = "Time", ylab = "Density of bovine")
# Add a title with the station ID
title(main = paste("New station ID:", stations[i]))
plot(station_data2$Time, station_data2$LI_bovine, type = "l",
xlab = "Time", ylab = "Density of bovine")
# Add a title with the station ID
title(main = paste("Old station ID:", stations[i]))
# Add a page break between plots
if (i < length(stations)) {
cat("\f")  # Insert a form feed character
}
}
# Close the PDF file
dev.off()
library(ggplot2)
library(units)
# Create a PDF file device
pdf("SwineComparison.pdf")
# Loop through the stations
for (i in seq_along(stations)) {
print(stations[i])
plot_bdn(stations[i])
}
# Close the PDF file device
dev.off()
print(st_buffer)
st_buffer
st_buffer
plot(tsbov)
tsbov
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
#geom_sf(data = st_buffer, col = "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
#geom_sf(data = st_buffer, col = "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
plot(mapPigs)
mapBovine
mapBovine <- ggplot(mergeA) +
geom_sf(aes(fill = DensityBovine)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
plot(mapBovine)
mapBovine <- ggplot(mergeA) +
geom_sf(aes(fill = DensityBovine)) +
scale_fill_continuous(type = "viridis")+
#geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
plot(mapBovine)
mapBovine <- ggplot(mergeA) +
geom_sf(aes(fill = DensityBovine)) +
scale_fill_continuous(type = "viridis")+
#geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
plot(mapBovine)
mapBovine <- ggplot(mergeA) +
geom_sf(aes(fill = DensityBovine)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
plot(mapBovine)
mapBovine <- ggplot(mergeA) +
geom_sf(aes(fill = DensityBovine)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
plot(mapBovine)
st_buffer
View(st_buffer)
View(st_buffer)
print(st_buffer$geometry[1])
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
geom_sf(data = st_buffer[st_buffer$IDStations==IDStations], col = "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
#geom_sf(data = st_buffer[st_buffer$IDStations==IDStations], col = "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
mapPigs
st_crs(st_buffer)
st_buffer <- st_as_sf(st_buffer, coords =  c("Longitude", "Latitude"), crs = 4326)
View(st_buffer)
View(st_buffer)
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
geom_sf(data = st_buffer[st_buffer$IDStations==IDStations], col = "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
