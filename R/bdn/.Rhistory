library(sf)
library(dplyr)
library(sp)
library(raster)
#Reading the files
##Shapefile
shapefile_path <- "/Users/marcovinciguerra/Desktop/bdn/second_grid.shp"
my_shapefile <- st_read(dsn = shapefile_path)
my_shapefile$field_1 <- NULL
##CSV
read_csv <- read.csv('/Users/marcovinciguerra/Desktop/bdn/Agrimonia_Dataset_v_2_0_1.csv')
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[1] = "Lon"
colnames(subset)[2] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(1:2, round, 2))
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
join$buffer <- st_buffer(join$geometry, dist = 10000)
View(join)
join$buffer <- st_buffer(join$geometry, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
View(read_csv)
View(read_csv)
unique(read_csv[, 1:3])
cord <- unique(read_csv[, 1:3])
library(sp)
coordinates(cord) <- c("Longitude", "Latitude")
View(cord)
plot(cord)
View(join)
join$buffer <- st_buffer(cord, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
library(raster)
st_as_sf(cord)
cord_sd ->st_as_sf(cord)
cord_sf <- st_as_sf(cord)
join$buffer <- st_buffer(cord_sf, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
st_buffer <- st_buffer(cord_sf, nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
View(st_buffer)
plot(st_nuffer)
plot(st_buffer)
View(st_buffer)
View(join)
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine", "IdStations")]
##Select the interested columns
subset <- read_csv[c("Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine", "IDStations")]
View(subset)
##Select the interested columns
subset <- read_csv[c("IDStations", "Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[3] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
colnames(subset)[2] = "Lon"
colnames(subset)[3] = "Lat"
View(join)
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
#Libraries
library(rgdal)
library(sf)
library(dplyr)
library(sp)
library(raster)
#Reading the files
##Shapefile
shapefile_path <- "/Users/marcovinciguerra/Desktop/bdn/second_grid.shp"
my_shapefile <- st_read(dsn = shapefile_path)
my_shapefile$field_1 <- NULL
##CSV
read_csv <- read.csv('/Users/marcovinciguerra/Desktop/bdn/Agrimonia_Dataset_v_2_0_1.csv')
cord <- unique(read_csv[, 1:3])
coordinates(cord) <- c("Longitude", "Latitude")
cord_sf <- st_as_sf(cord)
##Select the interested columns
subset <- read_csv[c("IDStations", "Longitude", "Latitude", "Time", "LI_pigs", "LI_bovine")]
colnames(subset)[2] = "Lon"
colnames(subset)[3] = "Lat"
#Round the columns
my_shapefile <- my_shapefile %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(1:2, round, 2))
subset <- subset %>%
mutate(across(2:3, round, 2))
#Join the dataframe
join <- merge(x = my_shapefile, y = subset, by = c("Lat", "Lon"))
View(st_buffer)
View(st_buffer)
join <- merge(x= join, y=st_buffer, by=("IDStations"))
# Perform a spatial join between the join and st_buffer objects
join <- st_join(join, st_buffer, join = st_intersects)
View(join)
View(join)
View(st_buffer)
View(st_buffer)
join <- merge(x= join, y=st_buffer, by="IDStations")
View(cord_sf)
View(my_shapefile)
View(my_shapefile)
load("/Users/marcovinciguerra/Downloads/WE_EM_LA_LI.Rdata")
load("~/Downloads/WE_EM_LA_LI.Rdata")
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(WE_EM_LA_LI)
View(st_buffer)
pot(st_buffer)
plot(st_buffer)
library(sf)
library(sf)
plot(st_buffer)
View(st_buffer)
View(st_buffer)
load("/Users/marcovinciguerra/Downloads/idw_era5land.RData")
View(df1)
View(df2)
View(df2_s)
View(df2_s)
View(dist)
View(dist)
View(my_shapefile)
View(my_shapefile)
load("dataMerge.rdata")
setwd("~/R/bdn")
load("dataMerge.rdata")
dataMerge <- dataMerge[dataMerge$Date == "2020-12-31",]
dataMerge <- dataMerge[dataMerge$Date == "2020-12-31",]
setwd("~/R/bdn")
my_shapefile <- st_read(dsn = "Com01012021_g_WGS84.shp")
library(sf)
setwd("~/R/bdn")
my_shapefile <- st_read(dsn = "Com01012021_g_WGS84.shp")
View(my_shapefile)
mergeA <- merge(shapename, dataMerge, by= "PRO_COM" )
View(my_shapefile)
View(my_shapefile)
mergeA <- merge(my_shapefile, dataMerge, by= "PRO_COM" )
View(mergeA)
View(mergeA)
#Libraries
library(rgdal)
library(sf)
library(dplyr)
library(sp)
library(raster)
library(leaflet)
library(sf)
#Loading the
setwd("~/R/bdn")
shapename <- read_sf('Com01012021_g_WGS84.shp')
#Loading the datasets
setwd("~/R/bdn")
my_shapefile <- st_read(dsn = "Com01012021_g_WGS84.shp")
setwd("~/R/bdn/Plot Differenze")
load("top20.rdata")
setwd("~/R/bdn")
csv <- read.csv("Agrimonia_Dataset_v_2_0_1.csv")
load("newDensity.rdata")
positions <- csv[, c("IDStations", "Latitude", "Longitude")]
merge <-merge(positions, top_20_stazioni, on = "IDStations")
plot(my_shapefile$geometry)
#Old time series
select_util_old <- merge(csv, top_20_stazioni, on = "IDStation")
select_util_old <- select_util_old[, c("IDStations", "Time","LI_pigs", "LI_bovine")]
#New time series
merge_new <- merge(top_20_stazioni, result, on= "IDStations")
merge_new <- merge_new[, c("IDStations", "Date", "wdSuini", "wdBovini")]
merge_new <- rename(merge_new, Time = Date, LI_pigs = wdSuini, LI_bovine = wdBovini)
#Merge
load("dataMerge.rdata")
dataMerge <- dataMerge[dataMerge$Date == "2020-12-31",]
mergeA <- merge(my_shapefile, dataMerge, by= "PRO_COM" )
#Plot dei suini
setwd("~/R/bdn/SerieStorica")
pdf("best_stations_Swine.pdf")
# Create a vector of unique station IDs
stations <- unique(merge_new$IDStations)
# Loop through each station
for (i in seq_along(stations)) {
# Subset the data for the current station and order by date
station_data <- merge_new[merge_new$IDStations == stations[i], ]
station_data <- station_data[order(station_data$Time), ]
#Old
station_data2 <- select_util_old[select_util_old$IDStations == stations[i], ]
station_data2 <- station_data2[order(station_data2$Time), ]
# Convert the Time variable to POSIXct format
station_data$Time <- as.POSIXct(station_data$Time)
station_data2$Time <- as.POSIXct(station_data2$Time)
# Check for missing or infinite values in the Time variable
if (any(is.na(station_data$Time)) || any(!is.finite(station_data$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
if (any(is.na(station_data2$Time)) || any(!is.finite(station_data2$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
# Create a time series plot
plot(station_data$Time, station_data$LI_pigs, type = "l",
xlab = "Time", ylab = "Density of pigs")
# Add a title with the station ID
title(main = paste("New station ID:", stations[i]))
plot(station_data2$Time, station_data2$LI_pigs, type = "l",
xlab = "Time", ylab = "Density of pigs")
# Add a title with the station ID
title(main = paste("Old station ID:", stations[i]))
# Add a page break between plots
if (i < length(stations)) {
cat("\f")  # Insert a form feed character
}
}
# Close the PDF file
dev.off()
#Plot dei bovini
setwd("~/R/bdn/SerieStorica")
pdf("best_stations_Bovine.pdf")
# Create a vector of unique station IDs
stations <- unique(merge_new$IDStations)
# Loop through each station
for (i in seq_along(stations)) {
# Subset the data for the current station and order by date
station_data <- merge_new[merge_new$IDStations == stations[i], ]
station_data <- station_data[order(station_data$Time), ]
#Old
station_data2 <- select_util_old[select_util_old$IDStations == stations[i], ]
station_data2 <- station_data2[order(station_data2$Time), ]
# Convert the Time variable to POSIXct format
station_data$Time  <- as.POSIXct(station_data$Time)
station_data2$Time <- as.POSIXct(station_data2$Time)
# Check for missing or infinite values in the Time variable
if (any(is.na(station_data$Time)) || any(!is.finite(station_data$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
if (any(is.na(station_data2$Time)) || any(!is.finite(station_data2$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
# Create a time series plot
plot(station_data$Time, station_data$LI_bovine, type = "l",
xlab = "Time", ylab = "Density of bovine")
# Add a title with the station ID
title(main = paste("New station ID:", stations[i]))
plot(station_data2$Time, station_data2$LI_bovine, type = "l",
xlab = "Time", ylab = "Density of bovine")
# Add a title with the station ID
title(main = paste("Old station ID:", stations[i]))
# Add a page break between plots
if (i < length(stations)) {
cat("\f")  # Insert a form feed character
}
}
# Close the PDF file
dev.off()
library(ggplot2)
library(units)
# Create a PDF file device
pdf("SwineComparison.pdf")
# Loop through the stations
for (i in seq_along(stations)) {
# Subset the data for the current station and order by date
station_data <- merge_new[merge_new$IDStations == stations[i], ]
station_data <- station_data[order(station_data$Time), ]
#Old
station_data2 <- select_util_old[select_util_old$IDStations == stations[i], ]
station_data2 <- station_data2[order(station_data2$Time), ]
# Convert the Time variable to POSIXct format
station_data$Time  <- as.POSIXct(station_data$Time)
station_data2$Time <- as.POSIXct(station_data2$Time)
# Check for missing or infinite values in the Time variable
if (any(is.na(station_data$Time)) || any(!is.finite(station_data$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
if (any(is.na(station_data2$Time)) || any(!is.finite(station_data2$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
# Create a ggplot object with station_data and station_data2 as data frames
p <- ggplot() +
geom_line(data = station_data, aes(x = Time, y = LI_pigs, color = "New")) +
geom_line(data = station_data2, aes(x = Time, y = LI_pigs, color = "Old")) +
labs(title = paste("Station ID", stations[i]),
x = "Time",
y = "Value",
color = "Data type")
# Add the plot to the PDF file
print(p)
}
# Close the PDF file device
dev.off()
pdf("BovineComparison.pdf")
# Loop through the stations
for (i in seq_along(stations)) {
# Subset the data for the current station and order by date
station_data <- merge_new[merge_new$IDStations == stations[i], ]
station_data <- station_data[order(station_data$Time), ]
#Old
station_data2 <- select_util_old[select_util_old$IDStations == stations[i], ]
station_data2 <- station_data2[order(station_data2$Time), ]
# Convert the Time variable to POSIXct format
station_data$Time  <- as.POSIXct(station_data$Time)
station_data2$Time <- as.POSIXct(station_data2$Time)
# Check for missing or infinite values in the Time variable
if (any(is.na(station_data$Time)) || any(!is.finite(station_data$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
if (any(is.na(station_data2$Time)) || any(!is.finite(station_data2$Time))) {
warning(paste("Invalid Time values for Station ID", stations[i]))
next  # Skip to the next iteration of the loop
}
# Create a ggplot object with station_data and station_data2 as data frames
p <- ggplot() +
geom_line(data = station_data, aes(x = Time, y = LI_bovine, color = "New")) +
geom_line(data = station_data2, aes(x = Time, y = LI_bovine, color = "Old")) +
labs(title = paste("Station ID", stations[i]),
x = "Time",
y = "Value",
color = "Data type")
# Add the plot to the PDF file
print(p)
}
# Close the PDF file device
dev.off()
View(mergeA)
View(mergeA)
View(mergeA)
View(mergeA)
View(mergeA)
View(merge_new)
mapPigs <- ggplot(mergeA) +
geom_sf(aes(col = "DensitySwines"))
mapPigs
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines))
mapPigs
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous("viridis")
mapPigs
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")
mapPigs
mapBovine <- ggplot(mergeA) +
geom_sf(aes(fill = DensityBovine)) +
scale_fill_continuous(type = "viridis")
mapBovine
tspigs <- ggplot() +
geom_line(data = station_data, aes(x = Time, y = LI_pigs, color = "New")) +
geom_line(data = station_data2, aes(x = Time, y = LI_pigs, color = "Old")) +
labs(title = paste("Station ID", stations[i]),
x = "Time",
y = "Value",
color = "Data type")
tspigs
View(station_data)
View(csv)
merge(csv[,1:3], station_data[,1]
mapPigs <- ggplot(mergeA) +
merge(csv[,1:3], station_data[,1])
merge(csv[,1:3], unique(station_data[,1]))
coordinates <- unique(csv[,1:3])
View(coordinates)
coordinates <- st_as_sf(coordinates, coords =  c("Longitude", "Latitude"), crs = 4326)
plot(coordinates)
save(coordinates, "coordinates.Rdata")
save(coordinates, file = "coordinates.Rdata")
setwd("~/R/bdn/SerieStorica")
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(coordinates[coordinates$IDStations==IDStations])
IDStations <- "1266"
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(coordinates[coordinates$IDStations==IDStations])
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(coordinates[coordinates$IDStations==IDStations, ])
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ])
plot(mapPigs)
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")
plot(mapPigs)
View(coordinates)
View(coordinates)
coordinates[coordinates$IDStations==IDStations, ]
bb <- coordinates[coordinates$IDStations==IDStations, ]
View(bb)
bb$geometry
bb$geometry[1]
bb$geometry[1,]
csv <- read.csv("Agrimonia_Dataset_v_2_0_1.csv")
setwd("~/R/bdn")
csv <- read.csv("Agrimonia_Dataset_v_2_0_1.csv")
coordinates <- unique(csv[,1:3])
sp_coord <- coordinates
coordinates
coordinates <- st_as_sf(coordinates, coords =  c("Longitude", "Latitude"), crs = 4326)
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_cartesian(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.5, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.5),
ylim =
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_cartesian(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.5, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.5),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.5, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.5)
)
)
plot(mapPigs)
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_cartesian(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.5, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.5),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.5, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.5)
)
plot(mapPigs)
sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.5
sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.5
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_cartesian(xlim = c(9.16625, 9.26),
ylim = c(44.73349, 44.83)
)
plot(mapPigs)
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")
mapPigs
View(mergeA)
crs(mergeA)
st_transform(mergeA, st_crs(coordinates))
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(9.16625, 9.26),
ylim = c(44.73349, 44.83)
)
mapPigs
mergeA <- st_transform(mergeA, st_crs(coordinates))
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(9.16625, 9.26),
ylim = c(44.73349, 44.83)
)
mapPigs
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.5, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.5),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.5, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.5)
)
mapPigs
st_buffer <- st_buffer(coordinates[coordinates$IDStations==IDStations, ], nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
st_buffer
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)+
geom_sf(st_buffer, col = "Red")
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)+
geom_sf(data = st_buffer, col = "red")
mapPigs
mapPigs <- ggplot(mergeA) +
geom_sf(aes(fill = DensitySwines)) +
scale_fill_continuous(type = "viridis")+
geom_sf(data = coordinates[coordinates$IDStations==IDStations, ], col= "red")+
geom_sf(data = st_buffer, col = "red")+
coord_sf(xlim = c(sp_coord$Longitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Longitude[sp_coord$IDStations==IDStations]+0.3),
ylim = c(sp_coord$Latitude[sp_coord$IDStations==IDStations]-0.3, sp_coord$Latitude[sp_coord$IDStations==IDStations]+0.3)
)
mapPigs
plot(st_buffer)
install.packages("cowplot")
st_buffer <- st_buffer(coordinates[coordinates$IDStations==IDStations, ], nQuadSegs = 4,  endCapStyle = 'SQUARE', dist = 0.05)
plot(st_buffer)
